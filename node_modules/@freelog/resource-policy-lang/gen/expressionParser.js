// Generated from expression.g4 by ANTLR 4.7.1
// jshint ignore: start
var antlr4 = require('antlr4/index');
var expressionVisitor = require('./expressionVisitor').expressionVisitor;

var grammarFileName = "expression.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u0016b\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0003\u0002\u0006\u0002\u001c\n\u0002\r\u0002\u000e\u0002\u001d",
    "\u0003\u0003\u0003\u0003\u0005\u0003\"\n\u0003\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0007\u0004\'\n\u0004\f\u0004\u000e\u0004*\u000b\u0004",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0007\u0005/\n\u0005\f\u0005\u000e",
    "\u00052\u000b\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0007\u0006",
    "7\n\u0006\f\u0006\u000e\u0006:\u000b\u0006\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007B\n\u0007\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0003\b\u0007\bI\n\b\f\b\u000e\bL\u000b\b",
    "\u0003\b\u0003\b\u0003\t\u0003\t\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0005\nZ\n\n\u0003\u000b\u0003\u000b\u0003",
    "\f\u0003\f\u0003\r\u0003\r\u0003\r\u0002\u0002\u000e\u0002\u0004\u0006",
    "\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u0002\u0005\u0003\u0002\b",
    "\t\u0003\u0002\n\u000b\u0004\u0002\u0012\u0012\u0014\u0014\u0002b\u0002",
    "\u001b\u0003\u0002\u0002\u0002\u0004!\u0003\u0002\u0002\u0002\u0006",
    "#\u0003\u0002\u0002\u0002\b+\u0003\u0002\u0002\u0002\n3\u0003\u0002",
    "\u0002\u0002\fA\u0003\u0002\u0002\u0002\u000eC\u0003\u0002\u0002\u0002",
    "\u0010O\u0003\u0002\u0002\u0002\u0012Y\u0003\u0002\u0002\u0002\u0014",
    "[\u0003\u0002\u0002\u0002\u0016]\u0003\u0002\u0002\u0002\u0018_\u0003",
    "\u0002\u0002\u0002\u001a\u001c\u0005\u0004\u0003\u0002\u001b\u001a\u0003",
    "\u0002\u0002\u0002\u001c\u001d\u0003\u0002\u0002\u0002\u001d\u001b\u0003",
    "\u0002\u0002\u0002\u001d\u001e\u0003\u0002\u0002\u0002\u001e\u0003\u0003",
    "\u0002\u0002\u0002\u001f\"\u0005\u0006\u0004\u0002 \"\u0007\u0004\u0002",
    "\u0002!\u001f\u0003\u0002\u0002\u0002! \u0003\u0002\u0002\u0002\"\u0005",
    "\u0003\u0002\u0002\u0002#(\u0005\b\u0005\u0002$%\t\u0002\u0002\u0002",
    "%\'\u0005\b\u0005\u0002&$\u0003\u0002\u0002\u0002\'*\u0003\u0002\u0002",
    "\u0002(&\u0003\u0002\u0002\u0002()\u0003\u0002\u0002\u0002)\u0007\u0003",
    "\u0002\u0002\u0002*(\u0003\u0002\u0002\u0002+0\u0005\n\u0006\u0002,",
    "-\t\u0003\u0002\u0002-/\u0005\n\u0006\u0002.,\u0003\u0002\u0002\u0002",
    "/2\u0003\u0002\u0002\u00020.\u0003\u0002\u0002\u000201\u0003\u0002\u0002",
    "\u00021\t\u0003\u0002\u0002\u000220\u0003\u0002\u0002\u000238\u0005",
    "\f\u0007\u000245\u0007\u0011\u0002\u000257\u0005\f\u0007\u000264\u0003",
    "\u0002\u0002\u00027:\u0003\u0002\u0002\u000286\u0003\u0002\u0002\u0002",
    "89\u0003\u0002\u0002\u00029\u000b\u0003\u0002\u0002\u0002:8\u0003\u0002",
    "\u0002\u0002;<\u0007\b\u0002\u0002<B\u0005\f\u0007\u0002=>\u0007\t\u0002",
    "\u0002>B\u0005\f\u0007\u0002?B\u0005\u000e\b\u0002@B\u0005\u0012\n\u0002",
    "A;\u0003\u0002\u0002\u0002A=\u0003\u0002\u0002\u0002A?\u0003\u0002\u0002",
    "\u0002A@\u0003\u0002\u0002\u0002B\r\u0003\u0002\u0002\u0002CD\u0005",
    "\u0010\t\u0002DE\u0007\u0006\u0002\u0002EJ\u0005\u0006\u0004\u0002F",
    "G\u0007\u000f\u0002\u0002GI\u0005\u0006\u0004\u0002HF\u0003\u0002\u0002",
    "\u0002IL\u0003\u0002\u0002\u0002JH\u0003\u0002\u0002\u0002JK\u0003\u0002",
    "\u0002\u0002KM\u0003\u0002\u0002\u0002LJ\u0003\u0002\u0002\u0002MN\u0007",
    "\u0007\u0002\u0002N\u000f\u0003\u0002\u0002\u0002OP\u0007\u0015\u0002",
    "\u0002P\u0011\u0003\u0002\u0002\u0002QZ\u0005\u0014\u000b\u0002RZ\u0005",
    "\u0016\f\u0002ST\u0007\u0006\u0002\u0002TU\u0005\u0006\u0004\u0002U",
    "V\u0007\u0007\u0002\u0002VZ\u0003\u0002\u0002\u0002WZ\u0007\u0003\u0002",
    "\u0002XZ\u0005\u0018\r\u0002YQ\u0003\u0002\u0002\u0002YR\u0003\u0002",
    "\u0002\u0002YS\u0003\u0002\u0002\u0002YW\u0003\u0002\u0002\u0002YX\u0003",
    "\u0002\u0002\u0002Z\u0013\u0003\u0002\u0002\u0002[\\\u0007\u0013\u0002",
    "\u0002\\\u0015\u0003\u0002\u0002\u0002]^\t\u0004\u0002\u0002^\u0017",
    "\u0003\u0002\u0002\u0002_`\u0007\u0016\u0002\u0002`\u0019\u0003\u0002",
    "\u0002\u0002\n\u001d!(08AJY"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, null, null, "'('", "')'", "'+'", "'-'", 
                     "'*'", "'/'", "'>'", "'<'", "'='", "','", "'.'", "'^'", 
                     "'pi'", null, "'e'", "'sum'" ];

var symbolicNames = [ null, "INT", "NEWLINE", "VARIABLE", "LPAREN", "RPAREN", 
                      "PLUS", "MINUS", "TIMES", "DIV", "GT", "LT", "EQ", 
                      "COMMA", "POINT", "POW", "PI", "SCIENTIFIC_NUMBER", 
                      "EULER", "SUM", "ID" ];

var ruleNames =  [ "prog", "stat", "expression", "multiplyingExpression", 
                   "powExpression", "signedAtom", "built_in_function", "funcname", 
                   "atom", "scientific", "constant", "variable" ];

function expressionParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

expressionParser.prototype = Object.create(antlr4.Parser.prototype);
expressionParser.prototype.constructor = expressionParser;

Object.defineProperty(expressionParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

expressionParser.EOF = antlr4.Token.EOF;
expressionParser.INT = 1;
expressionParser.NEWLINE = 2;
expressionParser.VARIABLE = 3;
expressionParser.LPAREN = 4;
expressionParser.RPAREN = 5;
expressionParser.PLUS = 6;
expressionParser.MINUS = 7;
expressionParser.TIMES = 8;
expressionParser.DIV = 9;
expressionParser.GT = 10;
expressionParser.LT = 11;
expressionParser.EQ = 12;
expressionParser.COMMA = 13;
expressionParser.POINT = 14;
expressionParser.POW = 15;
expressionParser.PI = 16;
expressionParser.SCIENTIFIC_NUMBER = 17;
expressionParser.EULER = 18;
expressionParser.SUM = 19;
expressionParser.ID = 20;

expressionParser.RULE_prog = 0;
expressionParser.RULE_stat = 1;
expressionParser.RULE_expression = 2;
expressionParser.RULE_multiplyingExpression = 3;
expressionParser.RULE_powExpression = 4;
expressionParser.RULE_signedAtom = 5;
expressionParser.RULE_built_in_function = 6;
expressionParser.RULE_funcname = 7;
expressionParser.RULE_atom = 8;
expressionParser.RULE_scientific = 9;
expressionParser.RULE_constant = 10;
expressionParser.RULE_variable = 11;

function ProgContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = expressionParser.RULE_prog;
    return this;
}

ProgContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProgContext.prototype.constructor = ProgContext;

ProgContext.prototype.stat = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatContext);
    } else {
        return this.getTypedRuleContext(StatContext,i);
    }
};

ProgContext.prototype.accept = function(visitor) {
    if ( visitor instanceof expressionVisitor ) {
        return visitor.visitProg(this);
    } else {
        return visitor.visitChildren(this);
    }
};




expressionParser.ProgContext = ProgContext;

expressionParser.prototype.prog = function() {

    var localctx = new ProgContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, expressionParser.RULE_prog);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 25; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 24;
            this.stat();
            this.state = 27; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << expressionParser.INT) | (1 << expressionParser.NEWLINE) | (1 << expressionParser.LPAREN) | (1 << expressionParser.PLUS) | (1 << expressionParser.MINUS) | (1 << expressionParser.PI) | (1 << expressionParser.SCIENTIFIC_NUMBER) | (1 << expressionParser.EULER) | (1 << expressionParser.SUM) | (1 << expressionParser.ID))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = expressionParser.RULE_stat;
    return this;
}

StatContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatContext.prototype.constructor = StatContext;


 
StatContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function BlankContext(parser, ctx) {
	StatContext.call(this, parser);
    StatContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BlankContext.prototype = Object.create(StatContext.prototype);
BlankContext.prototype.constructor = BlankContext;

expressionParser.BlankContext = BlankContext;

BlankContext.prototype.NEWLINE = function() {
    return this.getToken(expressionParser.NEWLINE, 0);
};
BlankContext.prototype.accept = function(visitor) {
    if ( visitor instanceof expressionVisitor ) {
        return visitor.visitBlank(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PrintExprContext(parser, ctx) {
	StatContext.call(this, parser);
    StatContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PrintExprContext.prototype = Object.create(StatContext.prototype);
PrintExprContext.prototype.constructor = PrintExprContext;

expressionParser.PrintExprContext = PrintExprContext;

PrintExprContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
PrintExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof expressionVisitor ) {
        return visitor.visitPrintExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};



expressionParser.StatContext = StatContext;

expressionParser.prototype.stat = function() {

    var localctx = new StatContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, expressionParser.RULE_stat);
    try {
        this.state = 31;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case expressionParser.INT:
        case expressionParser.LPAREN:
        case expressionParser.PLUS:
        case expressionParser.MINUS:
        case expressionParser.PI:
        case expressionParser.SCIENTIFIC_NUMBER:
        case expressionParser.EULER:
        case expressionParser.SUM:
        case expressionParser.ID:
            localctx = new PrintExprContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 29;
            this.expression();
            break;
        case expressionParser.NEWLINE:
            localctx = new BlankContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 30;
            this.match(expressionParser.NEWLINE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = expressionParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.multiplyingExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MultiplyingExpressionContext);
    } else {
        return this.getTypedRuleContext(MultiplyingExpressionContext,i);
    }
};

ExpressionContext.prototype.PLUS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(expressionParser.PLUS);
    } else {
        return this.getToken(expressionParser.PLUS, i);
    }
};


ExpressionContext.prototype.MINUS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(expressionParser.MINUS);
    } else {
        return this.getToken(expressionParser.MINUS, i);
    }
};


ExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof expressionVisitor ) {
        return visitor.visitExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




expressionParser.ExpressionContext = ExpressionContext;

expressionParser.prototype.expression = function() {

    var localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, expressionParser.RULE_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 33;
        this.multiplyingExpression();
        this.state = 38;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,2,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 34;
                _la = this._input.LA(1);
                if(!(_la===expressionParser.PLUS || _la===expressionParser.MINUS)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 35;
                this.multiplyingExpression(); 
            }
            this.state = 40;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,2,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MultiplyingExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = expressionParser.RULE_multiplyingExpression;
    return this;
}

MultiplyingExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultiplyingExpressionContext.prototype.constructor = MultiplyingExpressionContext;

MultiplyingExpressionContext.prototype.powExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PowExpressionContext);
    } else {
        return this.getTypedRuleContext(PowExpressionContext,i);
    }
};

MultiplyingExpressionContext.prototype.TIMES = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(expressionParser.TIMES);
    } else {
        return this.getToken(expressionParser.TIMES, i);
    }
};


MultiplyingExpressionContext.prototype.DIV = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(expressionParser.DIV);
    } else {
        return this.getToken(expressionParser.DIV, i);
    }
};


MultiplyingExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof expressionVisitor ) {
        return visitor.visitMultiplyingExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




expressionParser.MultiplyingExpressionContext = MultiplyingExpressionContext;

expressionParser.prototype.multiplyingExpression = function() {

    var localctx = new MultiplyingExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, expressionParser.RULE_multiplyingExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 41;
        this.powExpression();
        this.state = 46;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===expressionParser.TIMES || _la===expressionParser.DIV) {
            this.state = 42;
            _la = this._input.LA(1);
            if(!(_la===expressionParser.TIMES || _la===expressionParser.DIV)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 43;
            this.powExpression();
            this.state = 48;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PowExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = expressionParser.RULE_powExpression;
    return this;
}

PowExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PowExpressionContext.prototype.constructor = PowExpressionContext;

PowExpressionContext.prototype.signedAtom = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SignedAtomContext);
    } else {
        return this.getTypedRuleContext(SignedAtomContext,i);
    }
};

PowExpressionContext.prototype.POW = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(expressionParser.POW);
    } else {
        return this.getToken(expressionParser.POW, i);
    }
};


PowExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof expressionVisitor ) {
        return visitor.visitPowExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




expressionParser.PowExpressionContext = PowExpressionContext;

expressionParser.prototype.powExpression = function() {

    var localctx = new PowExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, expressionParser.RULE_powExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 49;
        this.signedAtom();
        this.state = 54;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===expressionParser.POW) {
            this.state = 50;
            this.match(expressionParser.POW);
            this.state = 51;
            this.signedAtom();
            this.state = 56;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SignedAtomContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = expressionParser.RULE_signedAtom;
    return this;
}

SignedAtomContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SignedAtomContext.prototype.constructor = SignedAtomContext;

SignedAtomContext.prototype.PLUS = function() {
    return this.getToken(expressionParser.PLUS, 0);
};

SignedAtomContext.prototype.signedAtom = function() {
    return this.getTypedRuleContext(SignedAtomContext,0);
};

SignedAtomContext.prototype.MINUS = function() {
    return this.getToken(expressionParser.MINUS, 0);
};

SignedAtomContext.prototype.built_in_function = function() {
    return this.getTypedRuleContext(Built_in_functionContext,0);
};

SignedAtomContext.prototype.atom = function() {
    return this.getTypedRuleContext(AtomContext,0);
};

SignedAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof expressionVisitor ) {
        return visitor.visitSignedAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};




expressionParser.SignedAtomContext = SignedAtomContext;

expressionParser.prototype.signedAtom = function() {

    var localctx = new SignedAtomContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, expressionParser.RULE_signedAtom);
    try {
        this.state = 63;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case expressionParser.PLUS:
            this.enterOuterAlt(localctx, 1);
            this.state = 57;
            this.match(expressionParser.PLUS);
            this.state = 58;
            this.signedAtom();
            break;
        case expressionParser.MINUS:
            this.enterOuterAlt(localctx, 2);
            this.state = 59;
            this.match(expressionParser.MINUS);
            this.state = 60;
            this.signedAtom();
            break;
        case expressionParser.SUM:
            this.enterOuterAlt(localctx, 3);
            this.state = 61;
            this.built_in_function();
            break;
        case expressionParser.INT:
        case expressionParser.LPAREN:
        case expressionParser.PI:
        case expressionParser.SCIENTIFIC_NUMBER:
        case expressionParser.EULER:
        case expressionParser.ID:
            this.enterOuterAlt(localctx, 4);
            this.state = 62;
            this.atom();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Built_in_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = expressionParser.RULE_built_in_function;
    return this;
}

Built_in_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Built_in_functionContext.prototype.constructor = Built_in_functionContext;

Built_in_functionContext.prototype.funcname = function() {
    return this.getTypedRuleContext(FuncnameContext,0);
};

Built_in_functionContext.prototype.LPAREN = function() {
    return this.getToken(expressionParser.LPAREN, 0);
};

Built_in_functionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Built_in_functionContext.prototype.RPAREN = function() {
    return this.getToken(expressionParser.RPAREN, 0);
};

Built_in_functionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(expressionParser.COMMA);
    } else {
        return this.getToken(expressionParser.COMMA, i);
    }
};


Built_in_functionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof expressionVisitor ) {
        return visitor.visitBuilt_in_function(this);
    } else {
        return visitor.visitChildren(this);
    }
};




expressionParser.Built_in_functionContext = Built_in_functionContext;

expressionParser.prototype.built_in_function = function() {

    var localctx = new Built_in_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, expressionParser.RULE_built_in_function);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 65;
        this.funcname();
        this.state = 66;
        this.match(expressionParser.LPAREN);
        this.state = 67;
        this.expression();
        this.state = 72;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===expressionParser.COMMA) {
            this.state = 68;
            this.match(expressionParser.COMMA);
            this.state = 69;
            this.expression();
            this.state = 74;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 75;
        this.match(expressionParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FuncnameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = expressionParser.RULE_funcname;
    return this;
}

FuncnameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FuncnameContext.prototype.constructor = FuncnameContext;

FuncnameContext.prototype.SUM = function() {
    return this.getToken(expressionParser.SUM, 0);
};

FuncnameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof expressionVisitor ) {
        return visitor.visitFuncname(this);
    } else {
        return visitor.visitChildren(this);
    }
};




expressionParser.FuncnameContext = FuncnameContext;

expressionParser.prototype.funcname = function() {

    var localctx = new FuncnameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, expressionParser.RULE_funcname);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 77;
        this.match(expressionParser.SUM);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AtomContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = expressionParser.RULE_atom;
    return this;
}

AtomContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AtomContext.prototype.constructor = AtomContext;

AtomContext.prototype.scientific = function() {
    return this.getTypedRuleContext(ScientificContext,0);
};

AtomContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

AtomContext.prototype.LPAREN = function() {
    return this.getToken(expressionParser.LPAREN, 0);
};

AtomContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

AtomContext.prototype.RPAREN = function() {
    return this.getToken(expressionParser.RPAREN, 0);
};

AtomContext.prototype.INT = function() {
    return this.getToken(expressionParser.INT, 0);
};

AtomContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

AtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof expressionVisitor ) {
        return visitor.visitAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};




expressionParser.AtomContext = AtomContext;

expressionParser.prototype.atom = function() {

    var localctx = new AtomContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, expressionParser.RULE_atom);
    try {
        this.state = 87;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case expressionParser.SCIENTIFIC_NUMBER:
            this.enterOuterAlt(localctx, 1);
            this.state = 79;
            this.scientific();
            break;
        case expressionParser.PI:
        case expressionParser.EULER:
            this.enterOuterAlt(localctx, 2);
            this.state = 80;
            this.constant();
            break;
        case expressionParser.LPAREN:
            this.enterOuterAlt(localctx, 3);
            this.state = 81;
            this.match(expressionParser.LPAREN);
            this.state = 82;
            this.expression();
            this.state = 83;
            this.match(expressionParser.RPAREN);
            break;
        case expressionParser.INT:
            this.enterOuterAlt(localctx, 4);
            this.state = 85;
            this.match(expressionParser.INT);
            break;
        case expressionParser.ID:
            this.enterOuterAlt(localctx, 5);
            this.state = 86;
            this.variable();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ScientificContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = expressionParser.RULE_scientific;
    return this;
}

ScientificContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ScientificContext.prototype.constructor = ScientificContext;

ScientificContext.prototype.SCIENTIFIC_NUMBER = function() {
    return this.getToken(expressionParser.SCIENTIFIC_NUMBER, 0);
};

ScientificContext.prototype.accept = function(visitor) {
    if ( visitor instanceof expressionVisitor ) {
        return visitor.visitScientific(this);
    } else {
        return visitor.visitChildren(this);
    }
};




expressionParser.ScientificContext = ScientificContext;

expressionParser.prototype.scientific = function() {

    var localctx = new ScientificContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, expressionParser.RULE_scientific);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 89;
        this.match(expressionParser.SCIENTIFIC_NUMBER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = expressionParser.RULE_constant;
    return this;
}

ConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantContext.prototype.constructor = ConstantContext;

ConstantContext.prototype.PI = function() {
    return this.getToken(expressionParser.PI, 0);
};

ConstantContext.prototype.EULER = function() {
    return this.getToken(expressionParser.EULER, 0);
};

ConstantContext.prototype.accept = function(visitor) {
    if ( visitor instanceof expressionVisitor ) {
        return visitor.visitConstant(this);
    } else {
        return visitor.visitChildren(this);
    }
};




expressionParser.ConstantContext = ConstantContext;

expressionParser.prototype.constant = function() {

    var localctx = new ConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, expressionParser.RULE_constant);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 91;
        _la = this._input.LA(1);
        if(!(_la===expressionParser.PI || _la===expressionParser.EULER)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = expressionParser.RULE_variable;
    return this;
}

VariableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableContext.prototype.constructor = VariableContext;

VariableContext.prototype.ID = function() {
    return this.getToken(expressionParser.ID, 0);
};

VariableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof expressionVisitor ) {
        return visitor.visitVariable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




expressionParser.VariableContext = VariableContext;

expressionParser.prototype.variable = function() {

    var localctx = new VariableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, expressionParser.RULE_variable);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 93;
        this.match(expressionParser.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.expressionParser = expressionParser;
