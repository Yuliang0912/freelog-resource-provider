// Generated from expression.g4 by ANTLR 4.7.1
// jshint ignore: start
var antlr4 = require('antlr4/index');

// This class defines a complete generic visitor for a parse tree produced by expressionParser.

function expressionVisitor() {
	antlr4.tree.ParseTreeVisitor.call(this);
	return this;
}

expressionVisitor.prototype = Object.create(antlr4.tree.ParseTreeVisitor.prototype);
expressionVisitor.prototype.constructor = expressionVisitor;

// Visit a parse tree produced by expressionParser#prog.
expressionVisitor.prototype.visitProg = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by expressionParser#printExpr.
expressionVisitor.prototype.visitPrintExpr = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by expressionParser#blank.
expressionVisitor.prototype.visitBlank = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by expressionParser#expression.
expressionVisitor.prototype.visitExpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by expressionParser#multiplyingExpression.
expressionVisitor.prototype.visitMultiplyingExpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by expressionParser#powExpression.
expressionVisitor.prototype.visitPowExpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by expressionParser#signedAtom.
expressionVisitor.prototype.visitSignedAtom = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by expressionParser#built_in_function.
expressionVisitor.prototype.visitBuilt_in_function = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by expressionParser#funcname.
expressionVisitor.prototype.visitFuncname = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by expressionParser#atom.
expressionVisitor.prototype.visitAtom = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by expressionParser#scientific.
expressionVisitor.prototype.visitScientific = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by expressionParser#constant.
expressionVisitor.prototype.visitConstant = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by expressionParser#variable.
expressionVisitor.prototype.visitVariable = function(ctx) {
  return this.visitChildren(ctx);
};



exports.expressionVisitor = expressionVisitor;