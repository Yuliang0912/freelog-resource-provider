/**
 * Created by yuliang on 2017/8/9.
 */

'use strict'

const URL = require('url')
const moment = require('moment')
const is = require('is-type-of')
const helper = require('./helper')
const validator = require('validator')
const ossClient = require('./file-oss/index')
const singleton = require('./tools/singleton')
const contractType = require('../enum/contract_type')
const resourceType = require('../enum/resource_type')
const ossClientKey = Symbol('freelog#ossClientKey')
const cryptoHelper = require('./helper/crypto_helper')
const restfulWebApiKey = Symbol('app#restfulWebApiKey')
const restfulWebApi = require('./restful-web-api/index')
const sendMessageToClusterWorkerEvent = Symbol.for(`agent#sendToClusterWorkerEvent`)
const sendMessageToClusterRandomWorkerEvent = Symbol.for(`agent#sendToClusterRandomWorkerEvent`)
const {ApiInvokingError} = require('../error/index')

module.exports = {

    __cacheMap__: new Map(),

    __cache__: {},

    /**
     * 类型判断库
     */
    type: is,

    /**
     * 合同类型
     */
    contractType,

    /**
     * 资源类型
     */
    resourceType,

    /**
     * 常用的校验库
     * wiki : https://github.com/chriso/validator.js
     */
    validator,

    /**
     * 惰性单例模式
     * @param func
     * @returns {Function}
     */
    singleton,

    /**
     * OSS客户端
     * @returns {*}
     */
    get ossClient() {
        if (!this.__cacheMap__.has(ossClientKey)) {
            this.__cacheMap__.set(ossClientKey, new ossClient(this.config))
        }
        return this.__cacheMap__.get(ossClientKey)
    },

    /**
     * 获取内部webApi地址
     * @returns {any}
     */
    get webApi() {
        if (!this.__cacheMap__.has(restfulWebApiKey)) {
            this.__cacheMap__.set(restfulWebApiKey, new restfulWebApi(this.config))
        }
        return this.__cacheMap__.get(restfulWebApiKey)
    },

    /**
     * 自定义配置
     * @param config
     * @returns {*}
     */
    ossClientCustom(config) {
        return new ossClient(config || this.config)
    },

    /**
     * 删除object属性
     * @param target
     * @param args
     * @returns {*}
     */
    deleteProperties(target, ...args) {
        args.forEach(field => Reflect.deleteProperty(target, field))
        return target
    },

    /**
     * 获取内部REST-API数据
     * @param url
     * @param options
     */
    curlIntranetApi(url, options, identityInfo = {}) {

        const {clientCredentialInfo} = this.config
        if (!clientCredentialInfo) {
            throw Error('未找到clientCredentialInfo配置信息')
        }

        const opt = Object.assign({headers: {}, dataType: 'json'}, options)
        const timeLine = moment().format('X')

        url = this.fixedEncodeURI(url)

        const text = `${URL.parse(url).path}&timeline=${timeLine}`

        opt.headers['clientid'] = clientCredentialInfo.clientId
        opt.headers['timeline'] = timeLine
        opt.headers['sign'] = cryptoHelper.hmacSha1(text, clientCredentialInfo.privateKey)

        if (Object.keys(identityInfo).length) {
            const token = cryptoHelper.base64Encode(JSON.stringify(identityInfo))
            const sign = cryptoHelper.hmacSha1(token, clientCredentialInfo.privateKey)
            opt.headers['authentication'] = `${token}:${sign}`
        }

        return this.curl(url, opt).catch(error => {
            throw new ApiInvokingError(error.message || error.toString(), {url, options})
        }).then(data => {
            let contentType = Reflect.has(data.res, 'headers') ? data.res.headers['content-type'] : undefined

            if (opt.dataType === 'original') {
                return data
            }
            else if (opt.dataType === 'json') {
                return helper.convertApiResult(data.data, url, options)
            } else if (contentType && contentType.toLowerCase().indexOf('application/json') > -1) {
                return helper.convertApiResult(JSON.parse(data.data.toString()), url, options)
            } else {
                return data.data.toString()
            }
        })
    },

    /**
     * 发送事件到所有cluster-app中
     */
    sendMessageToClusterWorker(eventName, data) {
        this.messenger.sendToAgent(sendMessageToClusterWorkerEvent.toString(), {eventName, data})
    },

    /**
     * 发送事件到所有cluster-app中
     */
    sendMessageToClusterRandomWorker(eventName, data) {
        this.messenger.sendToAgent(sendMessageToClusterRandomWorkerEvent.toString(), {eventName, data})
    },

    fixedEncodeURI(str) {
        return encodeURI(str).replace(/%5B/g, '[').replace(/%5D/g, ']')
    }
}