/**
 * Created by yuliang on 2017/6/30.
 */

'use strict'

const URL = require('url')
const lodash = require('lodash')
const moment = require('moment')
const cryptoHelper = require('./helper/crypto_helper')
const {ApiInvokingError, ApplicationError, ArgumentError, AuthorizationError, AuthenticationError} = require('../error/index')
const {UnLoginUser, LoginUser, InternalClient, LoginUserAndInternalClient, UnLoginUserAndInternalClient} = require('../enum/identity-type')


module.exports = {

    /**
     * 定义成功返回的API数据结构
     * @param data
     * @returns {exports}
     */
    success(data) {

        let {retCodeEnum, errCodeEnum} = this.app

        this.body = this.buildReturnObject(retCodeEnum.success, errCodeEnum.success, 'success', data)

        return this
    },

    /**
     * 只接受JSON格式的消息体
     * @param msg
     * @returns {exports}
     */
    allowContentType({type = 'json', msg = ''}) {
        if (!this.is(type)) {
            throw new Error(msg || `content-type must be ${type}`)
        }
        return this
    },

    /**
     * 定义错误处理->此处抛出异常会由middleware=>error_handler处理
     * context上的错误一般是应用程序接口级别的错误,故一级错误码为success
     * @param msg
     * @param errCode
     * @param retCode
     */
    error({msg, errCode, retCode, data}) {

        const {retCodeEnum, errCodeEnum, type} = this.app

        const message = type.error(arguments[0])
            ? arguments[0].message || arguments[0].toString()
            : type.string(arguments[0]) ? arguments[0] : msg || '接口内部异常'

        if (type.error(arguments[0]) && (this.config.env == 'test' || this.config.env == 'local')) {
            console.error(...arguments)
        }

        throw Object.assign(new Error(message), {
            retCode: retCode ? retCode : retCodeEnum.success,
            errCode: errCode ? errCode : errCodeEnum.apiError,
            data: !type.undefined(data) ? data : type.error(arguments[0]) ? arguments[0].data : undefined
        })
    },

    /**
     * 用户授权检测
     * @param modelOrUserId
     */
    userAuthorizationValidate(modelOrUserId) {

        var targetUserId = modelOrUserId
        if (lodash.isObject(modelOrUserId)) {
            targetUserId = modelOrUserId.userId
        }
        if (!lodash.isInteger(targetUserId)) {
            throw new ArgumentError('参数必须是int或者包含userId属性的object对象')
        }
        if (targetUserId !== this.request.userId) {
            throw new AuthorizationError('授权错误,当前登录用户没有操作权限', {userId: this.request.userId})
        }

        return this
    },

    /**
     * 验证参数
     * @returns {exports}
     */
    validateParams() {

        if (!this.errors || !this.errors.length) {
            return this
        }
        throw new ArgumentError(`参数校验失败,details:${JSON.stringify(this.errors)}`)
    },


    /**
     * 身份认证
     */
    validateVisitorIdentity(identityType = 6) {

        if ((identityType & InternalClient) === InternalClient && this._isInternalClient()) {
            return this
        }
        if ((identityType & LoginUser) === LoginUser && this._isLoginUser()) {
            return this
        }
        if ((identityType & UnLoginUser) === UnLoginUser && !this._isLoginUser()) {
            return this
        }
        if (identityType === LoginUserAndInternalClient && this._isLoginUser() && this._isInternalClient()) {
            return this
        }
        if (identityType === UnLoginUserAndInternalClient && !this._isLoginUser() && this._isInternalClient()) {
            return this
        }

        throw new AuthenticationError('访客身份认证不通过')
    },

    /**
     * 是否登陆用户
     * @returns {boolean}
     * @private
     */
    _isLoginUser() {
        return Boolean(this.request.userId)
    },

    /**
     * 是否内部客户端
     * @returns {boolean}
     * @private
     */
    _isInternalClient() {
        return Boolean(this.request.clientId)
    },

    /**
     * 校验参数,有错误就抛出异常
     * @param validateIdentity 是否同时校验身份
     * @returns {exports}
     */
    validate(validateIdentity = true) {

        if (validateIdentity && !this.request.userId) {
            this.error({
                msg: '未认证的请求',
                errCode: this.app.errCodeEnum.authenticationFailure,
                retCode: this.app.retCodeEnum.authenticationFailure,
            })
        }

        if (!this.errors || !this.errors.length) {
            return this
        }

        let msg = `参数校验失败,details:${JSON.stringify(this.errors)}`
        this.error({
            msg: msg,
            errCode: this.app.errCodeEnum.paramValidateError
        })
    },

    /**
     * 验证客户端身份
     * @returns {exports}
     */
    validateClientIdentity() {

        if (!this.request.identityInfo || !this.request.identityInfo.clientInfo) {
            this.error({
                msg: '未认证的请求',
                errCode: this.app.errCodeEnum.authenticationFailure,
            })
        }

        return this
    },

    /**
     * 构建API返回数据格式
     * @param ret {int} 一级错误码
     * @param errCode {int} 二级错误码
     * @param msg  {string} 消息内容
     * @param data {object} 返回数据
     * @returns {{ret: number, errcode: number, msg: string}}
     */
    buildReturnObject(ret, errCode, msg, data) {
        let {type, retCodeEnum, errCodeEnum} = this.app
        let result = {
            ret: type.int32(ret) ? ret : retCodeEnum.success,
            errcode: type.int32(errCode) ? errCode : errCodeEnum.success,
            msg: type.string(msg) || type.number(msg) ? msg.toString() : "success",
            data: type.nullOrUndefined(data) ? null : data
        }
        return result
    },

    /**
     * 获取内部REST-API数据
     * @param url
     * @param options
     */
    curlIntranetApi(url, options) {

        const {clientCredentialInfo} = this.config
        if (!clientCredentialInfo) {
            throw Error('未找到clientCredentialInfo配置信息')
        }

        const opt = Object.assign({headers: {}, dataType: 'json'}, options)
        const timeLine = moment().format('X')

        url = this.fixedEncodeURI(url)
        const text = `${URL.parse(url).path}&timeline=${timeLine}`

        opt.headers['clientid'] = clientCredentialInfo.clientId
        opt.headers['timeline'] = timeLine
        opt.headers['sign'] = cryptoHelper.hmacSha1(text, clientCredentialInfo.privateKey)

        if (this.get('authorization')) {
            opt.headers['authorization'] = this.get('authorization')
        }
        if (Object.keys(this.request.identityInfo).length) {
            const token = cryptoHelper.base64Encode(JSON.stringify(this.request.identityInfo))
            const sign = cryptoHelper.hmacSha1(token, clientCredentialInfo.privateKey)
            opt.headers['authentication'] = `${token}:${sign}`
        }
        if (this.get('traceId')) {
            opt.headers['traceId'] = this.get('traceId')
        }

        return this.curl(url, opt).catch(error => {
            throw new ApiInvokingError(error.message || error.toString(), {url, options})
        }).then(data => {
            let contentType = data.res.headers['content-type']
            if (opt.dataType === 'original') {
                return data
            }
            else if (toString.call(data.data) === '[object Object]') {
                return this.helper.convertApiResult(data.data, url, options)
            }
            else if (contentType && contentType.toLowerCase().includes('application/json')) {
                return this.helper.convertApiResult(JSON.parse(data.data.toString()), url, options)
            }
            else {
                return data.data.toString()
            }
        })
    },

    /**
     * 数据访问层简写
     * @returns {*}
     */
    get dal() {
        return this.app.dataProvider
    },

    /**
     * 数据访问层
     * @returns {*}
     */
    get dataProvider() {
        return this.app.dataProvider
    },

    /**
     * 获取配置
     * @returns {*}
     */
    get config() {
        return this.app.config
    },

    /**
     * 登录用户信息
     * @returns {*}
     */
    get userInfo() {
        return this.request.identityInfo.userInfo
    },

    /**
     * 内部webApi地址
     * @returns {*|any}
     */
    get webApi() {
        return this.app.webApi
    },

    /**
     * 实体空值检查
     * @param entity
     */
    entityNullObjectCheck(entity, msg, data) {
        if (!entity || toString.call(entity) !== '[object Object]') {
            throw new ApplicationError(lodash.isString(msg) ? msg : 'entity is null', data)
        }
        return this
    },

    /**
     * 对实体进行用户授权对比
     */
    entityUserAuthorization(entity, property = 'userId', targetId = undefined) {

        if (!entity || toString.call(entity) !== '[object Object]') {
            throw new ArgumentError(this.gettext('params-validate-failed', 'entity'))
        }

        targetId = targetId === undefined ? this.request.userId : targetId

        if (entity[property] !== targetId) {
            throw new AuthorizationError(this.gettext('user-authorization-failed'))
        }

        return this
    },

    /**
     * 实体空值检查和用户授权检查
     * @param entity
     * @param property
     * @param targetId
     */
    entityNullValueAndUserAuthorizationCheck(entity, {msg, data, property = 'userId'}) {

        if (!this.request.userId) {
            throw new AuthenticationError(this.gettext('user-authentication-failed'))
        }

        this.entityNullObjectCheck(entity, msg, data)

        if (entity[property] !== this.request.userId) {
            throw new AuthorizationError(this.gettext('user-authorization-failed'))
        }

        return this
    },

    /**
     * 修复URL编码中中括号无法正确转义的问题
     * @param str
     * @returns {string}
     */
    fixedEncodeURI(str) {
        return encodeURI(str).replace(/%5B/g, '[').replace(/%5D/g, ']')
    }
}