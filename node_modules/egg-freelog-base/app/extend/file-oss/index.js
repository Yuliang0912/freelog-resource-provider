/**
 * 文件对象存储服务管理(Object Storage Service)
 */

'use strict'

const aliOssClient = require('./aliyun-oss')

module.exports = class FileOssManager {

    constructor(config) {
        this.ossConfig = config.uploadConfig
        this.givenClient = this._getOssClient()
    }

    /**
     * 以buffer的形式上传文件到阿里云OSS
     * WIKI:https://help.aliyun.com/document_detail/32072.html?spm=5176.doc32070.6.754.A49ih2
     * @param filePath 文件上传路径
     * @param fileBuffer 文件buffer
     * @returns {Promise.<T>}
     */
    putBuffer(filePath, fileBuffer, options) {
        return this.givenClient.putBuffer(filePath, fileBuffer, options)
    }

    /**
     * 以stream的形式上传文件到阿里云OSS
     * WIKI:https://help.aliyun.com/document_detail/32072.html?spm=5176.doc32070.6.754.A49ih2
     * @param filePath 文件上传路径
     * @param fileStream 文件流
     * @param contentLength 文件大小
     * @returns {Promise.<T>}
     */
    putStream(filePath, fileStream, options) {
        return this.givenClient.putStream(filePath, fileStream, options)
    }

    /**
     * 删除文件
     * @param objectKey
     * @returns {void | Router | IterableIterator<*> | * | boolean | Promise<boolean>}
     */
    deleteFile(objectKey) {
        return this.givenClient.deleteFile(objectKey)
    }

    /**
     * 复制文件
     * @param to 目标objectKey
     * @param from 来源objectKey
     * @param options 可选,meta覆盖
     * @returns {*|IterableIterator<*|undefined>|number}
     */
    copyFile(to, from, options) {
        return this.givenClient.copyFile(to, from, options)
    }

    /**
     * 获取oss客户端
     * @private
     */
    _getOssClient() {
        const enableClientKey = Object.keys(this.ossConfig).find(x => this.ossConfig[x].enable)
        if (!enableClientKey) {
            throw new Error('没有可用的oss客户端')
        }
        if (enableClientKey === 'aliOss') {
            return new aliOssClient(this.ossConfig[enableClientKey])
        } else {
            throw new Error(`未实现的OSS类型:${enableClientKey}`)
        }
    }
}
