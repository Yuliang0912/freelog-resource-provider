/**
 * Created by yuliang on 2017-06-23.
 * 加密工具类
 */

'use strict'

const crypto = require('crypto')

module.exports = {

    /**
     * node原始加密对象
     * @returns {*}
     */
    crypto: crypto,

    /**
     * RsaSha256Sign签名
     * @param text 需要签名的文本
     * @param key  签名用的私key
     * @param digest 数据格式
     * @returns {string} 签名之后的文本
     */
    rsaSha256Sign(text, privatekey, digest = "hex") {
        let sign = crypto.createSign('RSA-SHA256')
        sign.update(text)
        return sign.sign(privatekey, digest)
    },

    /**
     * 签名验证
     * @param text 需要签名的文本
     * @param sign 签名
     * @param publickKey 公key
     * @param digest 数据格式
     * @returns {bool}
     */
    rsaSha256Verify(text, sign, publickKey, digest = "hex") {
        let verify = crypto.createVerify('RSA-SHA256');
        verify.update(text)
        return verify.verify(publickKey, sign, digest);
    },

    /**
     * sha512加密
     * @param text 需要加密的内容
     * @param digest 格式
     * @param digest 数据格式
     * @returns {string}
     */
    sha512(text, digest = "hex") {
        return crypto.createHash('sha512').update(text).digest(digest)
    },

    /**
     * hmacSha1加密
     * @param text 需要加密的内容
     * @param key  加密使用的key
     * @param digest 数据格式
     */
    hmacSha1(text, key, digest = "hex") {
        return crypto.createHmac('sha1', key).update(text).digest(digest)
    },

    /**
     * md5加密
     * @param text 需要加密的文本
     * @returns {string}
     */
    md5(text) {
        return crypto.createHash('md5').update(text).digest('hex')
    },

    /**
     * 3des加密
     * @param text 加密文本
     * @param key  加密key
     * @param iv   加密iv
     * @returns {string}
     */
    des3Cipher(text, key, iv) {
        let cipher = crypto.createCipheriv('des-ede3', Buffer.from(key), Buffer.from(iv ? iv : 0));
        let ciph = cipher.update(text, 'utf8', 'hex');
        ciph += cipher.final('hex');
        return ciph
    },

    /**
     * 3des解密
     * @param text 待解密文本
     * @param key  加密/解密key
     * @param iv   加密/解密iv
     * @returns {string}
     */
    des3Decipher(text, key, iv) {
        let decipher = crypto.createDecipheriv('des-ede3', Buffer.from(key), Buffer.from(iv ? iv : 0));
        let txt = decipher.update(text, 'hex', 'utf8');
        txt += decipher.final('utf8');
        return txt
    },

    /**
     * base64编码
     * @param text
     * @returns {string}
     */
    base64Encode(text) {
        return Buffer.from(text).toString('base64')
    },

    /**
     * base64解码
     * @param text
     * @returns {string}
     */
    base64Decode(text) {
        return Buffer.from(text, 'base64').toString()
    }
}