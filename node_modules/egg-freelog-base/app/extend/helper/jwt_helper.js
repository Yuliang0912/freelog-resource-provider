/**
 * Created by yuliang on 2017/11/16.
 */

'use strict'

const is = require('is-type-of')
const crypto = require('./crypto_helper')

module.exports = class JsonWebToken {

    constructor(publicKey, privateKey) {
        this.publicKey = publicKey
        this.privateKey = privateKey
    }

    /**
     * 创建json web token 身份标示信息
     */
    createJwt(payload, expire) {

        if (!is.object(payload)) {
            throw new Error('payload must be object')
        }
        if (!this.privateKey) {
            throw new Error('private Key can not empty')
        }
        if (!Reflect.has(payload, 'exp')) {
            Reflect.set(payload, 'exp', getExpire(expire || 1296000)) //默认14天
        }
        const header = {alg: "RSA-SHA256", typ: "JWT"}
        let headerBase64Str = crypto.base64Encode(JSON.stringify(header))
        let payloadBase64Str = crypto.base64Encode(JSON.stringify(payload))
        let signature = crypto.rsaSha256Sign(`${headerBase64Str}.${payloadBase64Str}`, this.privateKey)

        return `${headerBase64Str}.${payloadBase64Str}.${signature}`
    }

    /**
     * 校验jwt是否合法
     * @param jwtStr jwt字符串
     * @param publicKey 公key
     * @returns {{isVerify: true, payLoad: object-payLoad}}
     */
    verifyJwt(jwtStr) {

        let result = {isVerify: false, payLoad: null, error: null}

        let [header, payload, signature] = jwtStr.split('.')

        if (!this.publicKey) {
            result.error = 'public Key can not empty'
        } else {
            result.isVerify = crypto.rsaSha256Verify(`${header}.${payload}`, signature, this.publicKey)
        }

        if (result.isVerify) {
            result.payLoad = JSON.parse(crypto.base64Decode(payload))
        }

        if (result.isVerify && result.payLoad.expire < getExpire(0)) {
            result.isVerify = false
            result.error = 'token已超过有效期'
        }

        return result
    }
}

function getExpire(expireSpan) {
    let currTime = Math.round(new Date().getTime() / 1000)
    return currTime + expireSpan
}