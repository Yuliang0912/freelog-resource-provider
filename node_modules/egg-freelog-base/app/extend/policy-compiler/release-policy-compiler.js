'use strict'

const crypto = require('crypto')
const {ApplicationError} = require('../../error/index')
const {validator} = require('egg-freelog-base/app/extend/application')

module.exports = {

    /**
     * 发行策略编译
     * @param policyText
     * @param policyName
     * @returns {*}
     */
    compile(policyText, policyName = '') {

        const freelogReleasePolicyCompiler = require('@freelog/resource-policy-lang')

        if (validator.isBase64(policyText)) {
            policyText = new Buffer(policyText, 'base64').toString()
        }

        const {authorizedObjects, state_machine, errors, policy_text} = freelogReleasePolicyCompiler.compile(policyText)
        if (errors.length) {
            throw new ApplicationError('policy-text-validate-failed', {errors})
        }

        const policyInfo = {
            policyName, status: 1,
            authorizedObjects,
            policyText: policy_text,
            fsmDeclarations: state_machine.declarations,
            fsmStates: state_machine.states,
        }

        return this._policySegmentIdGenerate(policyInfo)
    },

    /**
     * 生成策略ID
     * @param policyInfo
     * @returns {*}
     * @private
     */
    _policySegmentIdGenerate(policyInfo) {

        const {authorizedObjects, fsmStates, fsmDeclarations} = policyInfo

        const targetSignText = JSON.stringify({
            authorizedObjects,
            fsmStates,
            fsmDeclarations
        }).replace(/\s/g, "").toLowerCase()

        policyInfo.policyId = crypto.createHash('md5').update(targetSignText).digest('hex')

        return policyInfo
    }
}

