/**
 * Created by yuliang on 2017/8/24.
 */
/**
 * koa-validate参数校验拓展函数
 * @type Object
 */

'use strict'

const commonRegex = require('./helper/common_regex')
const {ArgumentError} = require('../error/index')

module.exports = {

    /**
     * 此处修改覆盖源代码上的BUG.
     * 源代码上用!this.hasError() && !this.value判断 当this.value = 0或""时,则默认进入判断,导致错误出现
     * @param d
     * @returns {exports}
     */
    default(d) {
        if (!this.hasError() && this.value === undefined) {
            this.value = this.params[this.key] = d;
        }
        return this;
    },

    /**
     * 是否是freelog定义的资源ID格式
     */
    isResourceId(tip) {
        if (this.goOn && !commonRegex.resourceId.test(this.value)) {
            this.addError(tip || this.key + ' is not resourceId format.');
        }
        return this
    },

    /**
     * 发行ID
     * @param tip
     * @returns {exports}
     */
    isReleaseId(tip) {
        if (this.goOn && !commonRegex.mongoObjectId.test(this.value)) {
            this.addError(tip || this.key + ' is not releaseId format.');
        }
        return this
    },

    /**
     * 是否发行名
     * @param tip
     * @returns {exports}
     */
    isReleaseName(tip) {
        if (this.goOn && !commonRegex.releaseName.test(this.value)) {
            this.addError(tip || this.key + ' is not releaseName format.');
        }
        return this
    },


    /**
     * 是否发行名(全名)
     * @param tip
     * @returns {exports}
     */
    isFullReleaseName(tip) {
        if (this.goOn && !commonRegex.fullReleaseName.test(this.value)) {
            this.addError(tip || this.key + ' is not fullReleaseName format.');
        }
        return this
    },


    /**
     * resourceType命名规则
     * @param tip
     * @returns {exports}
     */
    isResourceType(tip) {
        if (this.goOn && !commonRegex.resourceType.test(this.value)) {
            this.addError(tip || this.key + ' is not resourceType format.');
        }
        return this
    },

    /**
     * 资源名格式
     * @param tip
     * @returns {exports}
     */
    isResourceName(tip) {
        if (this.goOn && !commonRegex.releaseName.test(this.value)) {
            this.addError(tip || this.key + ' is not resourceName format.');
        }
        return this
    },

    /**
     * mock资源名格式
     * @param tip
     * @returns {exports}
     */
    isMockResourceName(tip) {
        if (this.goOn && !commonRegex.releaseName.test(this.value)) {
            this.addError(tip || this.key + ' is not mockResourceName format.');
        }
        return this
    },

    /**
     * 是否是逗号分隔的resourceId
     * @param tip
     */
    isSplitResourceId(tip) {
        if (this.goOn && !commonRegex.splitResourceId.test(this.value)) {
            this.addError(tip || this.key + ' is not split resourceId format.');
        }
        return this
    },

    /**
     * 是否是mongoDB-ObjectId
     * @param tip
     */
    isMongoObjectId(tip) {
        if (this.goOn && !commonRegex.mongoObjectId.test(this.value)) {
            this.addError(tip || this.key + ' is error format.');
        }
        return this
    },

    /**
     * 是否是合同ID
     * @param tip
     * @returns {*}
     */
    isContractId(tip) {
        return this.isMongoObjectId(tip || this.key + ' is not contractId format.')
    },

    /**
     * 是否是PresentableId
     * @param tip
     * @returns {*}
     */
    isPresentableId(tip) {
        return this.isMongoObjectId(tip || this.key + ' is not presentableId format.')
    },


    /**
     * presentable名称
     * @param tip
     * @returns {exports}
     */
    isPresentableName(tip) {
        if (this.goOn && !commonRegex.releaseName.test(this.value)) {
            this.addError(tip || this.key + ' is not presentableName format.');
        }
        return this
    },

    /**
     * 是否是用户名格式
     * @param tip
     * @returns {exports}
     */
    isUsername(tip) {
        if (this.goOn && !commonRegex.username.test(this.value)) {
            this.addError(tip || this.key + ' is not username format.');
        }
        return this
    },

    /**
     * 是否是登录密码
     */
    isLoginPassword(tip) {
        if (this.goOn && !commonRegex.password.test(this.value)) {
            this.addError(tip || this.key + ' is not password format.');
        }
        return this
    },

    /**
     * 是否是事件ID
     * @param tip
     */
    isEventId(tip) {
        if (this.goOn && !commonRegex.bit32Hex.test(this.value)) {
            this.addError(tip || this.key + ' is not eventId format.');
        }
        return this
    },

    /**
     * 是否是分组ID
     * @param tip
     * @returns {exports}
     */
    isGroupId(tip) {
        if (this.goOn && !commonRegex.groupId.test(this.value)) {
            this.addError(tip || this.key + ' is not group id format.');
        }
        return this
    },

    /**
     * 是否bucketName
     * @param tip
     * @returns {exports}
     */
    isBucketName(tip) {
        if (this.goOn && !commonRegex.bucketName.test(this.value)) {
            this.addError(tip || this.key + ' is not bucket name format.');
        }
        return this
    },

    /**
     * 是否是分割的mongo-object-Id
     * @param tip
     * @returns {exports}
     */
    isSplitMongoObjectId(tip) {
        if (this.goOn && !commonRegex.splitMongoObjectId.test(this.value)) {
            this.addError(tip || this.key + ' is not split id format.');
        }
        return this
    },


    /**
     * 是否是分割的数字
     * @param tip
     * @returns {exports}
     */
    isSplitNumber(tip) {
        if (this.goOn && !commonRegex.splitNumber.test(this.value)) {
            this.addError(tip || this.key + ' is not split id format.');
        }
        return this
    },


    /**
     * 是否是分割的mongo-object-Id
     * @param tip
     * @returns {exports}
     */
    isSplitGroupId(tip) {
        if (this.goOn && !commonRegex.splitGroupId.test(this.value)) {
            this.addError(tip || this.key + ' is not split id format.');
        }
        return this
    },

    /**
     * 节点短域名格式
     * @param tip
     * @returns {exports}
     */
    isNodeDomain(tip) {
        if (this.goOn && !commonRegex.nodeDomain.test(this.value)) {
            this.addError(tip || this.key + ' is error format.');
        }
        return this
    },

    /**
     * 节点名格式验证
     * @param tip
     * @returns {exports}
     */
    isNodeName(tip) {
        if (this.goOn && !commonRegex.nodeName.test(this.value)) {
            this.addError(tip || this.key + ' is error format.');
        }
        return this
    },

    /**
     * 是否是交易账户
     * @param tip
     * @returns {exports}
     */
    isTransferAccountId(tip) {
        if (this.goOn && !commonRegex.transferAccountId.test(this.value)) {
            this.addError(tip || this.key + ' is not account format.');
        }
        return this
    },


    /**
     * md5格式校验
     * @param tip
     * @returns {exports}
     */
    isMd5(tip) {
        if (this.goOn && !commonRegex.md5.test(this.value)) {
            this.addError(tip || this.key + ' is not md5.');
        }
        return this
    },

    /**
     * 是否数组
     * @param tip
     */
    isArray(tip) {
        if (this.goOn && toString.call(this.value) !== '[object Array]') {
            this.addError(tip || this.key + ' is not array.');
        }
        return this
    },

    /**
     * 是否对象
     * @param tip
     */
    isObject(tip) {
        if (this.goOn && toString.call(this.value) !== '[object Object]') {
            this.addError(tip || this.key + ' is not object.');
        }
        return this
    },

    /**
     * 把字符串切割成数组
     * @param tip
     * @param split
     */
    toSplitArray(tip, split = ',') {
        if (this.goOn && !this.hasError()) {
            if (toString.call(this.value) !== '[object String]') {
                this.addError(tip || this.key + ' is not string.');
            } else {
                this.value = this.params[this.key] = this.value.split(split)
            }
        }
        return this
    },

    /**
     * 自定义函数校验
     * @param checkFunc
     * @param tip
     */
    is(checkFunc, tip) {
        if (typeof checkFunc !== 'function') {
            throw new ArgumentError('first argument must be function')
        }
        if (this.goOn && !checkFunc(this.value)) {
            this.addError(tip || this.key + ' validate failed.');
        }
        return this
    },

    /**
     * 转换范围版本
     */
    toVersionRange(tip) {
        this.isVersionRange(tip)
        if (this.goOn && !this.hasError()) {
            this.value = this.params[this.key] = require('semver').validRange(this.value)
        }
        return this;
    },

    /**
     * 是否范围版本
     * @param tip
     * @returns {exports}
     */
    isVersionRange(tip) {
        let semver = require('semver')
        if (this.goOn && semver.validRange(this.value) === null) {
            this.addError(tip || this.key + ' is not semver range version.');
        }
        return this
    }
}