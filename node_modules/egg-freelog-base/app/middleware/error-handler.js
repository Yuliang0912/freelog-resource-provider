/**
 * Created by yuliang on 2017/6/30.
 */

'use strict'

const {ApplicationError} = require('../error/index')

const JsonStringify = function (obj) {
    var cache = [];
    const str = JSON.stringify(obj, function (key, value) {
        if (typeof value === 'object' && value !== null) {
            if (cache.indexOf(value) !== -1) {
                try {
                    return JSON.parse(JSON.stringify(value));
                } catch (error) {
                    return
                }
            }
            cache.push(value);
        }
        return value;
    });
    cache = null;
    return str
}

/**
 * 错误处理中间件(freelog-egg-database必须引用的中间件)
 */
module.exports = () => async (ctx, next) => {

    const {retCodeEnum, errCodeEnum, type} = ctx.app

    try {

        ctx.error = ctx.error.bind(ctx)
        ctx.success = ctx.success.bind(ctx)
        ctx.request.identityInfo = {}

        //bodyParserError为上层egg默认首个中间件bodyParser的异常
        if (ctx.request.bodyParserError) {
            throw Object.assign(ctx.request.bodyParserError, {
                retCode: retCodeEnum.success,
                errCode: errCodeEnum.argumentError,
                data: 'bodyParse数据转换异常,请检查传入的数据是否符合接口规范'
            })
        }

        ctx.errors = []

        await next()

        if (ctx.body === undefined && ctx.status === 404) {
            ctx.body = ctx.buildReturnObject(retCodeEnum.success, errCodeEnum.notFoundPage, "404,Page Not Found", null)
            return
        }
        else if (ctx.body === undefined && /^(2|3)\d{2}$/.test(ctx.status)) {
            ctx.body = ctx.buildReturnObject(
                retCodeEnum.success,
                errCodeEnum.success, 'success', null)
        }
    } catch (e) {
        if (type.nullOrUndefined(e)) {
            e = new ApplicationError("not defined error")
        }
        if (type.string(e)) {
            e = new ApplicationError(e)
        }
        if (!type.int32(e.retCode)) {
            ctx.app.emit('error', e, ctx);
            e.retCode = retCodeEnum.serverError
        }
        if (!type.int32(e.errCode)) {
            e.errCode = errCodeEnum.autoSnapError
        }

        if (ctx.config.env === 'local' || ctx.config.env === 'test') {
            ctx.body = ctx.buildReturnObject(e.retCode, e.errCode, e.stack || e.message || e.toString(), e.data)
        } else {
            ctx.body = ctx.buildReturnObject(e.retCode, e.errCode, e.message || e.toString(), e.data)
        }

        ctx.body = JsonStringify(ctx.body)
        ctx.set('content-type', 'application/json; charset=utf-8')
    }
}

