'use strict';

/**
 * freelog基础框架默认配置.应用层如果需要更改.直接覆盖更改项即可
 * framework配置不能配置middleware
 * @param appInfo
 * @returns {{}}
 */

const fs = require('fs')
const path = require('path')

module.exports = appInfo => {
    const config = {}

    /**
     * 如果内部中间件没有处理漏掉的异常,则在此处统一处理
     * @type {{all(*, *): void}}
     */
    config.onerror = {
        all(err, ctx) {
            ctx.type = 'application/json'
            ctx.body = {ret: 0, errcode: 1, msg: '未处理的异常', data: err.stack || err.toString()}
        }
    }

    config.freelogBase = {
        retCodeEnum: {},
        errCodeEnum: {}
    }

    /**
     * 上传配置定义
     * @type {{aliOss: {enable: boolean}, amzS3: {enable: boolean}}}
     */
    config.uploadConfig = {
        aliOss: {
            enable: false,
        },
        amzS3: {
            enable: false,
        }
    }

    /**
     * bodyParser数据处理
     * @type {{enable: boolean, onerror: function(*, *)}}
     */
    config.bodyParser = {
        enable: true,
        onerror: (err, ctx) => {
            //此处错误格式为约定的名字,把错误交给下游的err-handler中间件来处理此异常
            ctx.request.bodyParserError = err
        }
    }

    config.jwtAuth = {
        cookieName: 'authInfo',
        publicKey: fs.readFileSync(path.join(__dirname, '/key/identity_public_key_default.pem')).toString()
    }

    config.keys = ['d5dd9d6d5d9aa0f36c00b779fa7e3cf4', '6a40eb7a1d7d01d508af102a151ab56f']


    /**
     * 周期设置
     */
    config.cycleSetting = [
        {
            startCycleNumber: 1,
            beginDate: new Date(2018, 1, 1), //大于等于此值
            endDate: new Date(2099, 1, 1), //小于此值
            cycleIntervalMillisecond: 14400000  //4小时
        }
    ]

    config.gatewayUrl = "https://api.freelog.com"

    return config
};
